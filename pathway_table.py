#! /usr/bin/env python
""" 
Produce a table containing the metabolic pathway name, coverage, and relative 
abundance in a HumanN-processed sample.
"""

import sys
import os
import argparse

def io_check(infile, mode='rU'):
    try:
        fh = open(infile, mode)
        fh.close()
    except IOError as e:
        sys.exit(str(e))
    return infile

def main():	
    path_table = {}
    with open(cov_file, 'rU') as fh:
        header = fh.readline()
        for line in fh:
            path_id, coverage = line.strip().split('\t')
            coverage = float(coverage)
            if '|' in path_id:
                continue
            if coverage >= threshold:
                path_table[path_id] = {'coverage': 0, 
                                       'abundance': 0,
                                       'pathway': []}
                path_table[path_id]['coverage'] = coverage
		
    with open(abund_file, 'rU') as fh:
        header = fh.readline()
        for line in fh:
            path_id, abundance = line.strip().split('\t')
            abundance = float(abundance)
            if '|' in path_id:
                continue
            try:
                path_table[path_id]['abundance'] = abundance
            except KeyError as e:
                print("warning: {} in abundance file not in coverage file".format(str(e)))

    with open(foam_file, 'rU') as fh:
        header = fh.readline()
        for line in fh:
            col = line.strip().split('\t')
            path_id = col[0]
            pathway = col[1:]
            try:
                path_table[path_id]['pathway'] = pathway
            except KeyError:
                continue

    out_h = open(out_file, 'w')
    krona_h = open(krona_file, 'w')

    output = 'Pathway\tCoverage\tAbundance\n'
    out_h.write(output)
    for path_id in path_table:
        abundance = str(path_table[path_id]['abundance'])
        coverage = str(path_table[path_id]['coverage'])
        if foam_file:
            out_path = '\t'.join(path_table[path_id]['pathway'])
        else:
            out_path = path_id
        output = "{}\t{}\t{}\n".format(out_path.replace('\t', ', '), coverage, abundance)
        out_h.write(output)
        output = "{}\t{}\n".format(abundance, out_path)
        krona_h.write(output)

    out_h.close()
    krona_h.close()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Produce a table containing "
        "the metabolic pathways found in a sample through HUMAnN, along with "
        "their coverage and abundance")
    parser.add_argument('coverage', metavar='COVERAGE', 
                        type=io_check, 
                        help="pathway coverage file generated by HUMAnN")
    parser.add_argument('abundance', metavar='ABUNDANCE',
                        type=io_check,
                        help="pathway abundance file generated by HUMAnN")
    parser.add_argument('-f', '--foam', metavar='FOAM',
                        type=io_check,
                        help="file relating foam pathway ids to gene families")
    parser.add_argument('-t', '--threshold', 
                        type=float, 
                        default = 0.3, 
                        help = "coverage threshold [default: 0.3]")
    parser.add_argument('-p', '--prefix', 
                        required=True,
                        type=str, 
                        help = "prefix of output files")
    args = parser.parse_args()
    threshold = args.threshold
    foam_file = args.foam
    cov_file = args.coverage
    abund_file = args.abundance
    out_file = io_check('{}.csv'.format(args.prefix), 'w')
    krona_file = io_check('{}.krona'.format(args.prefix), 'w')
    
    main()
    sys.exit(0)

